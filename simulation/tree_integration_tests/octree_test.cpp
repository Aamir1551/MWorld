#include <cstring>
#include <unordered_set>
#include <set>


#include <world_handler.hpp>
#include <settings.hpp>
#include <matrix.hpp>
#include <omp.h>
#include <chrono>

using namespace std;


using namespace numerics;
using namespace settings;
using namespace blocks;

int main(int argc, char *argv[])
{


#if defined(GLFW_ON)
    cout << "GLFW needs to be turned off for testing collision octree" << endl;
    exit(0);
#endif


    if(argc < 14) {
        cout << "Insufficient Parameters for barnes_hut_test.cpp file" << endl;
        exit(0);
    }

    WorldHandler world = WorldHandler( atoi(argv[2]),
                                       atoi(argv[3]),
                                       atoi(argv[4]),
                                       atoi(argv[5]),
                                       atoi(argv[6]),
                                       atoi(argv[7]),
                                       atoi(argv[8]),
                                       atoi(argv[9]),
                                       atoi(argv[10]),
                                       atoi(argv[11]),
                                       atoi(argv[12]),
                                       atoi(argv[13]),
                                       4);


    using std::chrono::high_resolution_clock;
    using std::chrono::duration_cast;
    using std::chrono::milliseconds;

    auto start_time = high_resolution_clock::now();
    auto currentFrame = high_resolution_clock::now();
    auto lastFrame = high_resolution_clock::now(); // Time of last frame
    auto deltaTime = duration_cast<milliseconds>(currentFrame - lastFrame); // time between current frame and last frame

    real frame_count = 0;
    real total_frame_count = 0;

    auto prev_time =  high_resolution_clock::now();

    while (
            duration_cast<milliseconds>(currentFrame - start_time).count() < atoi(argv[1]) * 1000 // time between current frame and last frame
    )
    {
       currentFrame = high_resolution_clock::now();
       deltaTime = duration_cast<milliseconds>(currentFrame - lastFrame); // Time between current frame and last frame
       lastFrame = currentFrame;

        auto contact_list = world.CollisionHandlerBruteForce();
        auto contact_list1 = world.CollisionHandlerWithOctree();

        // Insert contacts generated by using brute force approach and insert them into a set
        set<pair<Block *, Block *>> c;
        for(auto const &i : contact_list) {
           c.insert(make_pair(i.body1, i.body2));
           c.insert(make_pair(i.body2, i.body1));
        }

        // Insert contacts generated by using collision octree and insert them into a set
        set<pair<Block *, Block *>> c1;
        for(auto const &i : contact_list1) {
            c1.insert(make_pair(i.body1, i.body2));
            c1.insert(make_pair(i.body2, i.body1));
        }

        // Check if the two sets are the same
        if(c != c1 || contact_list.size() != contact_list1.size()) {
            cout << c.size() << " " << c1.size() <<  endl;
            cout << "FAIL" << endl;
            exit(0);
        }

        world.AddForcesViaBarnesHut(deltaTime.count() / 1000.0);
        world.Update(contact_list, deltaTime.count()/1000.0);

        frame_count++;
        total_frame_count++;
        if(duration_cast<milliseconds>(currentFrame - prev_time).count()>= 1000.0) {
            frame_count = 0;
            prev_time = currentFrame;
        }
    }
    cout << "SUCCESS" << endl;

    return 0;
}